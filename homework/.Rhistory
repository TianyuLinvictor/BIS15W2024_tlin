filter(weight!="NA")%>%
ggplot(aes(x=species,y=weight))+
geom_point()+
geom_boxplot(na.rm = T)+
scale_y_log10()+
coord_flip()
library(tidyverse)
library(janitor)
library(naniar)
deserts%>%
filter(weight!="NA")%>%
ggplot(aes(x=species,y=weight))+
geom_point()+
geom_boxplot(na.rm = T)+
scale_y_log10()+
coord_flip()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(janitor)
library(ggmap)
library(readr)
dataset <- read_csv(NULL)
bear.sightings <- read.csv("~/Desktop/BIS15W2024_tlin/homework/data/bear-sightings.csv")
View(bear.sightings)
grizzly<- read.csv("~data/bear-sightings.csv")
grizzly<- read.csv("data/bear-sightings.csv")
View(grizzly)
grizzly  %>%
select(latitude, longitude) %>%
summary()
lat_grizzly <- c(55.02, 70.37)
long_grizzly <- c(-166.2, -131.3)
bbox_grizzly <- make_bbox(long_grizzly, lat_grizzly, f = 0.03)
map_sharks <- get_stadiamap(bbox_sharks, maptype = "stamen_terrain", zoom=7)
map_grizzly  <- get_stadiamap(bbox_grizzly , maptype = "stamen_terrain", zoom=7)
map_grizzly  <- get_stadiamap(bbox_grizzly, maptype = "stamen_terrain", zoom=7)
map_grizzly  <- get_stadiamap(bbox_grizzly, maptype = "stamen_terrain", zoom=6)
map_grizzly  <- get_stadiamap(bbox_grizzly, maptype = "stamen_terrain", zoom=6)
map_grizzly  <- get_stadiamap(bbox_grizzly, maptype = "stamen_terrain", zoom=7)
map_grizzly  <- get_stadiamap(bbox_grizzly, maptype = "stamen_terrain", zoom=4)
map_grizzly  <- get_stadiamap(bbox_grizzly, maptype = "stamen_terrain", zoom=5)
map_grizzly  <- get_stadiamap(bbox_grizzly, maptype = "stamen_terrain", zoom=6)
map_grizzly<-get_map(bbox_grizzly, maptype = "terrain", source = "stamen")
library(tidyverse)
library(janitor)
library(ggmap)
map_grizzly<-get_map(bbox_grizzly, maptype = "terrain", source = "stamen")
lat_sharks <- c(32.59, 41.56)
long_sharks <- c(-124.7 , -117.1)
bbox_sharks <- make_bbox(long_sharks, lat_sharks, f = 0.03)
map_sharks <- get_stadiamap(bbox_sharks, maptype = "stamen_terrain", zoom=7)
register_stadiamaps("1374dd1d-097f-42ff-9cdb-4ad247b0f2ab", write = FALSE)
map_grizzly<-get_map(bbox_grizzly, maptype = "terrain", source = "stamen")
map_grizzly<-get_map(bbox_grizzly, maptype = "terrain", source = "stamen")
register_stadiamaps("bdcdd64b-6990-4222-a303-4b263a8d7161", write = FALSE)
map_grizzly <- get_stadiamap(bbox_grizzly, maptype = "stamen_terrain", zoom=7)
map_grizzly <- get_stadiamap(bbox_grizzly, maptype = "stamen-terrain", zoom=7)
map_grizzly <- get_stadiamap(bbox_grizzly, maptype = "stamen_terrain", zoom=7)
map_grizzly <- get_stadiamap(bbox_grizzly, maptype = "stamen_terrain")
register_stadiamaps("e77f55a8-a371-44cd-a7dd-6384b4586d64", write = FALSE)
map_grizzly <- get_stadiamap(bbox_grizzly, maptype = "stamen_terrain")
register_stadiamaps("bdcdd64b-6990-4222-a303-4b263a8d71614", write = FALSE)
library(tidyverse)
library(janitor)
library(ggmap)
register_stadiamaps("bdcdd64b-6990-4222-a303-4b263a8d71614", write = FALSE)
map_grizzly <- get_stadiamap(bbox_grizzly, maptype = "stamen_terrain")
map_grizzly <- get_stadiamap(bbox_grizzly, maptype = "stamen_terrain",zoom=7)
library(tidyverse)
library(janitor)
library(ggmap)
register_stadiamaps("bdcdd64b-6990-4222-a303-4b263a8d71614", write = FALSE)
map_grizzly <- get_stadiamap(bbox_grizzly, maptype = "stamen_terrain",zoom=7)
map_grizzly <- get_stadiamap(bbox_grizzly, maptype = "terrain",zoom=7)
map_grizzly <- get_stadiamap(bbox_grizzly, maptype = "stamen_terrain",zoom=7)
lat_grizzly <- c(55.02, 70.37)
long_grizzly <- c(-166.2, -131.3)
bbox_grizzly <- make_bbox(long_grizzly, lat_grizzly, f = 0.03)
map_grizzly <- get_stadiamap(bbox_grizzly, maptype = "stamen_terrain",zoom=7)
map_grizzly <- get_stadiamap(bbox_grizzly, maptype = "stamen_terrain",zoom=1)
map_grizzly <- get_stadiamap(bbox_grizzly, maptype = "stamen_terrain")
register_stadiamaps("1374dd1d-097f-42ff-9cdb-4ad247b0f2ab", write = FALSE)
library(tidyverse)
library(janitor)
library(ggmap)
register_stadiamaps("1374dd1d-097f-42ff-9cdb-4ad247b0f2ab", write = FALSE)
map_grizzly <- get_stadiamap(bbox_grizzly, maptype = "stamen_terrain")
register_stadiamaps("1374dd1d-097f-42ff-9cdb-4ad247b0f2ab", write = FALSE)
map1 <- get_stadiamap(bbox, maptype = "stamen_terrain", zoom=7)
lat <- c(34.67, 41.80)
long <- c(-124.1, -115.5)
bbox <- make_bbox(long, lat, f = 0.03) #f is the fraction of the bounding box to add to the range
map1 <- get_stadiamap(bbox, maptype = "stamen_terrain", zoom=7)
ggmap(map1)
register_stadiamaps("1374dd1d-097f-42ff-9cdb-4ad247b0f2ab", write = FALSE)
map_sharks <- get_stadiamap(bbox_sharks, maptype = "stamen_terrain", zoom=7)
ggmap(map_sharks)
register_stadiamaps("1374dd1d-097f-42ff-9cdb-4ad247b0f2ab", write = FALSE)
map_grizzly <- get_stadiamap(bbox_grizzly, maptype = "stamen_terrain", zoom=7)
ggmap(map_grizzly)
ggmap(map_grizzly) +
geom_point(data = grizzly, aes(longitude, latitude), size=0.4) +
labs(x= "Longitude", y= "Latitude", title="Grizzly bears Locations")
wolves_dataset <- read.csv("~/Desktop/BIS15W2024_tlin/homework/data/wolves_data/wolves_dataset.csv")
View(wolves_dataset)
wolves<- read.csv("~data/wolves_data/wolves_dataset.csv")
wolves<- read.csv("data/wolves_data/wolves_dataset.csv")
View(wolves)
View(wolves)
wolves_48<-wolves%>%
filter(lat=<48.38|lat=>24.52)
wolves_48<-wolves%>%
filter(lat<=48.38|lat>=24.52)
View(wolves_48)
wolves_48<-wolves%>%
filter(lat<=48.38&lat>=24.52)
View(wolves_48)
wolves_48<-wolves%>%
filter(lat<=48.38&lat>=24.52)%>%
filter(long<=-124.77&-66.95)
View(wolves)
wolves_48<-wolves%>%
filter(lat<=48.38&lat>=24.52)%>%
filter(long>=-124.77&long<=-66.95)
View(wolves_48)
wolves%>%
count(pop)
wolves_48  %>%
select(lat, long) %>%
summary()
lat_wolves_48 <- c(33.89, 47.75)
long_wolves_48 <- c(-110.99, -86.82)
bbox_wolves_48 <- make_bbox(long_wolves_48, lat_wolves_48, f = 0.03)
bbox_wolves_48 <- get_stadiamap(bbox_grizzly, maptype = "stamen_terrain_lines", zoom=7)
ggmap(bbox_wolves_48)
bbox_wolves_48 <- get_stadiamap(bbox_grizzly, maptype = "stamen_terrain_lines", zoom=3)
ggmap(bbox_wolves_48)
bbox_wolves_48 <- get_stadiamap(bbox_grizzly, maptype = "stamen_terrain_lines", zoom=5)
ggmap(bbox_wolves_48)
bbox_wolves_48 <- get_stadiamap(bbox_grizzly, maptype = "stamen_terrain_lines", zoom=6)
ggmap(bbox_wolves_48)
wolves_48  %>%
select(lat, long) %>%
summary()
bbox_wolves_48 <- get_stadiamap(bbox_grizzly, maptype = "stamen_terrain_lines", zoom=1)
ggmap(bbox_wolves_48)
bbox_wolves_48 <- get_stadiamap(bbox_grizzly, maptype = "stamen_terrain_lines", zoom=2)
ggmap(bbox_wolves_48)
bbox_wolves_48 <- get_stadiamap(bbox_grizzly, maptype = "stamen_terrain_lines", zoom=4)
ggmap(bbox_wolves_48)
bbox_wolves_48 <- get_stadiamap(bbox_grizzly, maptype = "stamen_terrain_lines", zoom=4)
ggmap(bbox_wolves_48)
lat_wolves_48 <- c(33.89, 47.75)
long_wolves_48 <- c(-110.99, -86.82)
bbox_wolves_48 <- make_bbox(long_wolves_48, lat_wolves_48, f = 0.03)
bbox_wolves_48 <- get_stadiamap(bbox_grizzly, maptype = "stamen_terrain_lines", zoom=4)
ggmap(bbox_wolves_48)
bbox_wolves_48 <- get_stadiamap(bbox_grizzly, maptype = "stamen_terrain_lines", zoom=5)
ggmap(bbox_wolves_48)
bbox_wolves_48 <- get_stadiamap(bbox_grizzly, maptype = "stamen_terrain_lines", zoom=8)
bbox_wolves_48 <- get_stadiamap(bbox_grizzly, maptype = "stamen_terrain_lines", zoom=7)
ggmap(bbox_wolves_48)
bbox_wolves_48 <- get_stadiamap(bbox_grizzly, maptype = "stamen_terrain_lines", zoom=5)
ggmap(bbox_wolves_48)
wolves_48  %>%
select(lat, long) %>%
summary()
map_wolves_48 <- get_stadiamap(bbox_wolves_48, maptype = "stamen_terrain_lines", zoom=5)
lat_wolves_48 <- c(33.89, 47.75)
long_wolves_48 <- c(-110.99, -86.82)
bbox_wolves_48 <- make_bbox(long_wolves_48, lat_wolves_48, f = 0.03)
map_wolves_48 <- get_stadiamap(bbox_wolves_48, maptype = "stamen_terrain_lines", zoom=5)
ggmap(map_wolves_48)
ggmap(map_wolves_48) +
geom_point(data = wolves_48, aes(long, lat), size=0.4) +
labs(x= "Longitude", y= "Latitude", title="Wolves Locations")
ggmap(map_wolves_48) +
geom_point(data = wolves_48, aes(long, lat), size=1) +
labs(x= "Longitude", y= "Latitude", title="Wolves Locations")
ggmap(map_wolves_48) +
geom_point(data = wolves_48, aes(long, lat,color = pop), size=1) +
labs(x= "Longitude", y= "Latitude", title="Wolves Locations")
ggmap(map_wolves_48) +
geom_point(data = wolves_48, aes(long, lat,color = pop), size=pop) +
labs(x= "Longitude", y= "Latitude", title="Wolves Locations")
ggmap(map_wolves_48) +
geom_point(data = wolves_48, aes(long, lat,color = pop), size=3) +
labs(x= "Longitude", y= "Latitude", title="Wolves Locations")
ggmap(map_wolves_48) +
geom_point(data = wolves_48, aes(long, lat,color = pop), size=3) +
labs(x= "Longitude", y= "Latitude", title="Wolves Locations")
knitr::opts_chunk$set(echo = TRUE)
UC_admit <- read_csv("data/UC_admit.csv")
library(tidyverse)
library(shiny)
library(shinydashboard)
install.packages("shinydashboard")
library(tidyverse)
library(shiny)
library(shinydashboard)
UC_admit <- read_csv("data/UC_admit.csv")
glimpse(gapminder)
glimpse(UC_admit)
UC_admit <- read_csv("data/UC_admit.csv")
glimpse(UC_admit)
anyNA(UC_admit) #there are no NAs
View(UC_admit)
UC_admit<- UC_admit %>%
filter(Perc FR=!"NA")
UC_admit<- UC_admit %>%
filter(Perc FR =!"NA")
glimpse(UC_admit)
UC_admit<- UC_admit %>%
filter(FilteredCountFR  =!"NA")
UC_admit<- UC_admit %>%
filter(FilteredCountFR  !="NA")
anyNA(UC_admit) #there are NAs
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Admissions by Ethnicity 2010-2019"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
radioButtons("x", "Select Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"),
selected = "2010"),
selectInput("y", "Select Campus", choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants")
), # close the first box
box(title = "UC Admissions", width = 8,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x=reorder(Ethnicity, FilteredCountFR), y=FilteredCountFR)) +
geom_col(color="black", fill="steelblue", alpha=0.75) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Ethnicity", y = "Number")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
UC_admit$Academic_Yr <- as.factor(UC_admit$Academic_Yr)
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Admissions by Year and Ethnicity"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Campus", choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants"),
radioButtons("y", "Select Ethnicity", choices = c("International", "Unknown", "White", "Asian", "Chicano/Latino", "American Indian", "African American"),
selected = "International")
), # close the first box
box(title = "UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Campus==input$x & Ethnicity==input$y & Category==input$z) %>%
ggplot(aes(x=Academic_Yr, y=FilteredCountFR)) +
geom_col(color="black", fill="steelblue", alpha=0.75) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Year", y = "Enrollment")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
UC_admit$Academic_Yr <- as.factor(UC_admit$Academic_Yr)
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Admissions by Year and Ethnicity"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Campus", choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants"),
radioButtons("y", "Select Ethnicity", choices = c("International", "Unknown", "White", "Asian", "Chicano/Latino", "American Indian", "African American"),
selected = "International")
), # close the first box
box(title = "UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Campus==input$x & Ethnicity==input$y & Category==input$z) %>%
ggplot(aes(x=Academic_Yr, y=FilteredCountFR)) +
geom_col(color="black", fill="steelblue", alpha=0.75) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Year", y = "Enrollment")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Admissions by Ethnicity 2010-2019"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
radioButtons("x", "Select Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"),
selected = "2010"),
selectInput("y", "Select Campus", choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants")
), # close the first box
box(title = "UC Admissions", width = 8,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x=reorder(Ethnicity, FilteredCountFR), y=FilteredCountFR)) +
geom_col(color="black", fill="steelblue", alpha=0.75) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Ethnicity", y = "Number")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
UC_admit$Academic_Yr <- as.factor(UC_admit$Academic_Yr)
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Admissions by Year and Ethnicity"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Campus", choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants"),
radioButtons("y", "Select Ethnicity", choices = c("International", "Unknown", "White", "Asian", "Chicano/Latino", "American Indian", "African American"),
selected = "International")
), # close the first box
box(title = "UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Campus==input$x & Ethnicity==input$y & Category==input$z) %>%
ggplot(aes(x=Academic_Yr, y=FilteredCountFR)) +
geom_col(color="black", fill="steelblue", alpha=0.75) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Year", y = "Enrollment")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Admissions by Ethnicity 2010-2019"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
radioButtons("x", "Select Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"),
selected = "2010"),
selectInput("y", "Select Campus", choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants")
), # close the first box
box(title = "UC Admissions", width = 8,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x=reorder(Ethnicity, FilteredCountFR), y=FilteredCountFR)) +
geom_col(color="black", fill="steelblue", alpha=0.75) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Ethnicity", y = "Number")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
UC_admit$Academic_Yr <- as.factor(UC_admit$Academic_Yr)
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Admissions by Year and Ethnicity"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Campus", choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants"),
radioButtons("y", "Select Ethnicity", choices = c("International", "Unknown", "White", "Asian", "Chicano/Latino", "American Indian", "African American"),
selected = "International")
), # close the first box
box(title = "UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Campus==input$x & Ethnicity==input$y & Category==input$z) %>%
ggplot(aes(x=Academic_Yr, y=FilteredCountFR)) +
geom_col(color="black", fill="steelblue", alpha=0.75) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Year", y = "Enrollment")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Admissions by Ethnicity 2010-2019"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
radioButtons("x", "Select Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"),
selected = "2010"),
selectInput("y", "Select Campus", choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants")
), # close the first box
box(title = "UC Admissions", width = 8,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x=reorder(Ethnicity, FilteredCountFR), y=FilteredCountFR)) +
geom_col(color="black", fill="green", alpha=0.75) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Ethnicity", y = "Number")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
UC_admit$Academic_Yr <- as.factor(UC_admit$Academic_Yr)
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Admissions by Year and Ethnicity"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Campus", choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants"),
radioButtons("y", "Select Ethnicity", choices = c("International", "Unknown", "White", "Asian", "Chicano/Latino", "American Indian", "African American"),
selected = "International")
), # close the first box
box(title = "UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Campus==input$x & Ethnicity==input$y & Category==input$z) %>%
ggplot(aes(x=Academic_Yr, y=FilteredCountFR)) +
geom_col(color="black", fill="pink", alpha=0.75) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Year", y = "Enrollment")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
shinyApp(ui, server)
shinyApp(ui, server)
