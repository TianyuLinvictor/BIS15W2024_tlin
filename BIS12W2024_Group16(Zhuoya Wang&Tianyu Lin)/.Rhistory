box(title = "Plot Options", width = 3,
textInput("x", "Name"),
textInput("y", "Name"),
selectInput("z", "Select Base", choices = c("speed", "sp_defense", "sp_attack","hp","attack","defense","capture_rate"),
selected = "hp")
), # close the first box
box(title = "Compare", width = 9,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
pokemon %>%
filter(name==input$x | name==input$y) %>%
ggplot(aes_string(x="name",y=input$z, fill = "name")) +
geom_bar(stat = "identity",color="black",alpha=0.75) +
theme(axis.text.x = element_text(hjust = 1,size=15,face="bold"),
axis.text.y = element_text(hjust = 1,size=15,face="bold"))+
labs(x = "")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Pokemon Compare"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
textInput("x", "Name"),
textInput("y", "Name"),
selectInput("z", "Select Base", choices = c("speed", "sp_defense", "sp_attack","hp","attack","defense","capture_rate"),
selected = "hp")
), # close the first box
box(title = "Compare", width = 9,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
pokemon %>%
filter(name==input$x | name==input$y) %>%
ggplot(aes_string(x="name",y=input$z, fill = "name")) +
geom_bar(stat = "identity",color="black",alpha=0.75) +
theme(axis.text.x = element_text(hjust = 1,size=15,face="bold"),
axis.text.y = element_text(hjust = 1,size=15,face="bold"),
axis.title.y = element_text(hjust = 1,size=15,face="bold"))+
labs(x = "")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Pokemon Compare"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
textInput("x", "Name"),
textInput("y", "Name"),
selectInput("z", "Select Base", choices = c("speed", "sp_defense", "sp_attack","hp","attack","defense","capture_rate"),
selected = "hp")
), # close the first box
box(title = "Compare", width = 9,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
pokemon %>%
filter(name==input$x | name==input$y) %>%
ggplot(aes_string(x="name",y=input$z, fill = "name")) +
geom_bar(stat = "identity",color="black",alpha=0.75) +
theme(axis.text.x = element_text(hjust = 1,size=15,face="bold"),
axis.text.y = element_text(hjust = 1,size=15,face="bold"),
axis.title.y = element_text(size=15,face="bold"))+
labs(x = "")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
pokemon$capture_rate <- as.numeric(as.character(pokemon$capture_rate))
ui <- dashboardPage(
dashboardHeader(title = "Pokemon Compare"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
textInput("x", "Name"),
textInput("y", "Name"),
selectInput("z", "Select Base", choices = c("speed", "sp_defense", "sp_attack","hp","attack","defense","capture_rate"),
selected = "hp")
), # close the first box
box(title = "Compare", width = 9,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
pokemon %>%
filter(name==input$x | name==input$y) %>%
ggplot(aes_string(x="name",y=input$z, fill = "name")) +
geom_bar(stat = "identity",color="black",alpha=0.75) +
theme(axis.text.x = element_text(hjust = 1,size=15,face="bold"),
axis.text.y = element_text(hjust = 1,size=15,face="bold"),
axis.title.y = element_text(size=15,face="bold"))+
labs(x = "")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
pokemon$capture_rate <- as.numeric(as.character(pokemon$capture_rate))
ui <- dashboardPage(
dashboardHeader(title = "Pokemon Compare"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
textInput("x", "Name"),
textInput("y", "Name"),
selectInput("z", "Select Base", choices = c("speed", "sp_defense", "sp_attack","hp","attack","defense","capture_rate","against_bug"),
selected = "hp")
), # close the first box
box(title = "Compare", width = 9,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
pokemon %>%
filter(name==input$x | name==input$y) %>%
ggplot(aes_string(x="name",y=input$z, fill = "name")) +
geom_bar(stat = "identity",color="black",alpha=0.75) +
theme(axis.text.x = element_text(hjust = 1,size=15,face="bold"),
axis.text.y = element_text(hjust = 1,size=15,face="bold"),
axis.title.y = element_text(size=15,face="bold"))+
labs(x = "")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
pokemon$capture_rate <- as.numeric(as.character(pokemon$capture_rate))
ui <- dashboardPage(
dashboardHeader(title = "Pokemon Compare"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
textInput("x", "Name"),
textInput("y", "Name"),
selectInput("z", "Select Base", choices = c("speed", "sp_defense", "sp_attack","hp","attack","defense","capture_rate","against_bug"),
selected = "hp")
), # close the first box
box(title = "Compare", width = 9,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
pokemon %>%
filter(name==input$x | name==input$y) %>%
ggplot(aes_string(x="name",y=input$z, fill = "name")) +
geom_bar(stat = "identity",color="black",alpha=0.75) +
theme(axis.text.x = element_text(hjust = 1,size=15,face="bold"),
axis.text.y = element_text(hjust = 1,size=15,face="bold"),
axis.title.y = element_text(size=15,face="bold"))+
labs(x = "")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
pokemon$capture_rate <- as.numeric(as.character(pokemon$capture_rate))
ui <- dashboardPage(
dashboardHeader(title = "Pokemon Compare"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
textInput("x", "Name"),
textInput("y", "Name"),
selectInput("z", "Select Base", choices = c("speed", "sp_defense", "sp_attack","hp","attack","defense","capture_rate","against_bug"),
selected = "hp")
), # close the first box
box(title = "Compare", width = 9,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
pokemon %>%
filter(name==input$x | name==input$y) %>%
ggplot(aes_string(x="name",y=input$z, fill = "name")) +
geom_bar(stat = "identity",color="black",alpha=0.75) +
geom_text(aes_string(label=input$z),size=4,vjust=-0.5)+
theme(axis.text.x = element_text(hjust = 1,size=15,face="bold"),
axis.text.y = element_text(hjust = 1,size=15,face="bold"),
axis.title.y = element_text(size=15,face="bold"))+
labs(x = "")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
pokemon$capture_rate <- as.numeric(as.character(pokemon$capture_rate))
ui <- dashboardPage(
dashboardHeader(title = "Pokemon Compare"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
textInput("x", "Name"),
textInput("y", "Name"),
selectInput("z", "Select Base", choices = c("speed", "sp_defense", "sp_attack","hp","attack","defense","capture_rate","against_bug"),
selected = "hp")
), # close the first box
box(title = "Compare", width = 9,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
pokemon %>%
filter(name==input$x | name==input$y) %>%
ggplot(aes_string(x="name",y=input$z, fill = "name")) +
geom_bar(stat = "identity",color="black",alpha=0.75) +
geom_text(aes_string(label=input$z),size=10,vjust=-0.5)+
theme(axis.text.x = element_text(hjust = 1,size=15,face="bold"),
axis.text.y = element_text(hjust = 1,size=15,face="bold"),
axis.title.y = element_text(size=15,face="bold"))+
labs(x = "")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
pokemon$capture_rate <- as.numeric(as.character(pokemon$capture_rate))
ui <- dashboardPage(
dashboardHeader(title = "Pokemon Compare"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
textInput("x", "Name"),
textInput("y", "Name"),
selectInput("z", "Select Base", choices = c("speed", "sp_defense", "sp_attack","hp","attack","defense","capture_rate","against_bug"),
selected = "hp")
), # close the first box
box(title = "Compare", width = 9,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
pokemon %>%
filter(name==input$x | name==input$y) %>%
ggplot(aes_string(x="name",y=input$z, fill = "name")) +
geom_bar(stat = "identity",color="black",alpha=0.75) +
geom_text(aes_string(label=input$z),size=6,vjust=-0.5ï¼Œface="bold")+
pokemon$capture_rate <- as.numeric(as.character(pokemon$capture_rate))
ui <- dashboardPage(
dashboardHeader(title = "Pokemon Compare"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
textInput("x", "Name"),
textInput("y", "Name"),
selectInput("z", "Select Base", choices = c("speed", "sp_defense", "sp_attack","hp","attack","defense","capture_rate","against_bug"),
selected = "hp")
), # close the first box
box(title = "Compare", width = 9,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
pokemon %>%
filter(name==input$x | name==input$y) %>%
ggplot(aes_string(x="name",y=input$z, fill = "name")) +
geom_bar(stat = "identity",color="black",alpha=0.75) +
geom_text(aes_string(label=input$z),size=6,vjust=-0.5,face="bold")+
theme(axis.text.x = element_text(hjust = 1,size=15,face="bold"),
axis.text.y = element_text(hjust = 1,size=15,face="bold"),
axis.title.y = element_text(size=15,face="bold"))+
labs(x = "")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
pokemon$capture_rate <- as.numeric(as.character(pokemon$capture_rate))
ui <- dashboardPage(
dashboardHeader(title = "Pokemon Compare"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
textInput("x", "Name"),
textInput("y", "Name"),
selectInput("z", "Select Base", choices = c("speed", "sp_defense", "sp_attack","hp","attack","defense","capture_rate","against_bug"),
selected = "hp")
), # close the first box
box(title = "Compare", width = 9,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
pokemon %>%
filter(name==input$x | name==input$y) %>%
ggplot(aes_string(x="name",y=input$z, fill = "name")) +
geom_bar(stat = "identity",color="black",alpha=0.75) +
geom_text(aes_string(label=input$z),size=5,vjust=-0.5,face="bold")+
theme(axis.text.x = element_text(hjust = 1,size=15,face="bold"),
axis.text.y = element_text(hjust = 1,size=15,face="bold"),
axis.title.y = element_text(size=15,face="bold"))+
labs(x = "")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
pokemon$capture_rate <- as.numeric(as.character(pokemon$capture_rate))
ui <- dashboardPage(
dashboardHeader(title = "Pokemon Compare"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
textInput("x", "Name"),
textInput("y", "Name"),
selectInput("z", "Select Base", choices = c("speed", "sp_defense", "sp_attack","hp","attack","defense","capture_rate","against_bug"),
selected = "hp")
), # close the first box
box(title = "Compare", width = 9,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
pokemon %>%
filter(name==input$x | name==input$y) %>%
ggplot(aes_string(x="name",y=input$z, fill = "name")) +
geom_bar(stat = "identity",color="black",alpha=0.75) +
geom_text(aes_string(label=input$z),size=5.5,vjust=-0.5,face="bold")+
theme(axis.text.x = element_text(hjust = 1,size=15,face="bold"),
axis.text.y = element_text(hjust = 1,size=15,face="bold"),
axis.title.y = element_text(size=15,face="bold"))+
labs(x = "")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
View(pokemon)
pokemon$capture_rate <- as.numeric(as.character(pokemon$capture_rate))
ui <- dashboardPage(
dashboardHeader(title = "Pokemon Compare"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
textInput("x", "Name"),
textInput("y", "Name"),
selectInput("z", "Select what to compare", choices = c("against_bug","against_dark","against_dragon","against_electric","against_fairy","against_fight","against_fire","against_flying","against_ghost","against_grass","against_ground","against_ice","against_normal","against_poison","against_psychic","against_rock","against_steel","against_water","attack","capture_rate","defense","hp","sp_attack","sp_defense","speed"),
selected = "hp")
), # close the first box
box(title = "Compare", width = 9,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
pokemon %>%
filter(name==input$x | name==input$y) %>%
ggplot(aes_string(x="name",y=input$z, fill = "name")) +
geom_bar(stat = "identity",color="black",alpha=0.75) +
geom_text(aes_string(label=input$z),size=5.5,vjust=-0.5,face="bold")+
theme(axis.text.x = element_text(hjust = 1,size=15,face="bold"),
axis.text.y = element_text(hjust = 1,size=15,face="bold"),
axis.title.y = element_text(size=15,face="bold"))+
labs(x = "")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
shinyApp(ui, server)
library("tidyverse")
library("janitor")
library("naniar")
library("dplyr")
pokemon <- read.csv("pokemon.csv")
library(shiny); runApp('Shiny App Compare.R')
library("tidyverse")
library("janitor")
library("naniar")
library("dplyr")
library("tidyverse")
library("janitor")
library("naniar")
library("dplyr")
pokemon <- read.csv("pokemon.csv")
glimpse(pokemon)
summary(pokemon)
pokemon %>% naniar::miss_var_summary()
pokemon <- pokemon %>%
mutate_all(~ifelse( .== "", NA, .))%>%
mutate(type2 = replace_na(type2, 'none'))
pokemon_per_gen <- table(pokemon$generation);pokemon_per_gen
# Plot
ggplot(data = as.data.frame(pokemon_per_gen), aes(x = reorder(Var1, Freq), y = Freq)) + geom_bar(stat = "identity", fill = "lightskyblue") +
labs(x = "Generation", y = "Number of PokÃ©mon", title = "PokÃ©mon Introduced per Generation") +
coord_flip()+
theme_light()
# Count primary types per generation
type_per_gen <- aggregate(cbind(type1) ~ generation, data = pokemon, FUN = function(x) length(unique(x)));type_per_gen
# Plot
ggplot(data = type_per_gen, aes(x = as.numeric(generation), y = type1)) +
geom_line() +
geom_point() +
labs(x = "Generation", y = "Unique Primary Types", title = "Diversity of Primary PokÃ©mon Types per Generation") +
theme_light()
avg_stats_per_gen <- aggregate(cbind(hp, attack, defense, sp_attack, sp_defense, speed) ~ generation, data = pokemon, mean)
# Melting the data for easier plotting
library(reshape2)
melted_data <- melt(avg_stats_per_gen, id.vars = "generation")
# Plot
ggplot(melted_data, aes(x = generation, y = value, color = variable)) +
geom_line() +
geom_point() +
labs(x = "Generation", y = "Average Stat Value", title = "Evolution of Average Stats per Generation") +
facet_wrap(~ variable)+
theme_minimal()
# Count legendary PokÃ©mon per generation
legendary_per_gen <- aggregate(is_legendary ~ generation, data = pokemon, sum)
# Plot
ggplot(data = legendary_per_gen, aes(x = generation, y = is_legendary)) +
geom_bar(stat = "identity", fill = "gold") +
labs(x = "Generation", y = "Number of Legendary PokÃ©mon", title = "Legendary PokÃ©mon per Generation") +
theme_minimal()
pokemon$capture_rate <- as.numeric(as.character(pokemon$capture_rate))
capture_rate_per_gen <- aggregate(capture_rate ~ generation, data = pokemon, mean)
ggplot(data = capture_rate_per_gen, aes(x = generation, y = capture_rate)) +
geom_line(color = "blue") +
geom_point(color = "red", size = 2) +
labs(x = "Generation", y = "Average Capture Rate", title = "Average Capture Rate Change Across Generations") +
theme_minimal()
against_columns <- grep("against_", names(pokemon), value = TRUE)
# Calculate the mean of 'against_' variables for each generation
avg_against_per_gen <- pokemon %>%
group_by(generation) %>%
summarise_at(vars(against_columns), mean, na.rm = TRUE) %>%
gather(key = "against_type", value = "mean_value", -generation)
# Plot
ggplot(avg_against_per_gen, aes(x = generation, y = mean_value, color = against_type)) +
geom_line() +
geom_point() +
labs(x = "Generation", y = "Average Against Value", title = "Average 'Against' Values per Generation") +
theme_minimal() +
facet_wrap(~ against_type)+
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + # To improve x-axis labels readability
scale_color_viridis_d() # Use a distinct color palette for better differentiation
pokemon <- read.csv("data/pokemon.csv")
library(readr)
pokemon <- read_csv("data/pokemon.csv")
View(pokemon)
pokemon <- read_csv("data/pokemon.csv")
library(readr)
pokemon <- read_csv("data/pokemon.csv")
View(pokemon)
library("tidyverse")
library("janitor")
library("naniar")
library("dplyr")
pokemon <- read_csv("data/pokemon.csv")
pokemon <- read_csv("data/pokemon.csv")
pokemon <- read_csv("pokemon.csv")
library(readr)
Final_Project_new <- read_csv("project picture code/Final_Project_new.Rmd")
View(Final_Project_new)
library(readr)
pokemon <- read_csv("pokemon.csv")
View(pokemon)
pokemon <- read_csv("pokemon.csv")
pokemon <- read.csv("pokemon.csv")
library("tidyverse")
library("janitor")
library("naniar")
library("dplyr")
pokemon <- read.csv("pokemon.csv")
View(pokemon)
